install.packages("KernSmooth")
library(KernSmooth)
"Hello world!"
git push
library(datasets)
data(iris)
?iris
iris
mean(iris[Sepal.Length], Species = "virginica")
mean(iris[,Sepal.Length], Species = "virginica")
mean(iris[,"Sepal.Length"], Species = "virginica")
mean(iris[,"Sepal.Length"], Species == "virginica")
mean(iris[,"Sepal.Length"], "Species" = "virginica")
mean(iris[,"Sepal.Length"])
mean(iris[,"Sepal.Length"], "Species" == "virginica")
mean(iris[,"Sepal.Length"], "Species" = "virginica")
mean(iris[,"Sepal.Length"], "Species" = virginica)
mean(iris[,"Sepal.Length"], iris[,"Species"] = "virginica")
mean(iris[,"Sepal.Length"], iris[,"Species"] == "virginica")
mean(iris$Sepal.Length)
mean(iris$Sepal.Length, iris$Sepcies="virginica")
mean(iris$Sepal.Length, iris$Species="virginica")
mean(iris$Sepal.Length, iris$Species<-"virginica")
iris
iris.virginica<-subset(iris,"Species"==""virginica)
iris.virginica<-subset(iris,iris[,"Species"]=virginica)
iris.virginica<-subset(iris,iris[,"Species"]="virginica")
iris.virginica<-subset(iris,iris[,"Species"]=="virginica")
iris.virginica
iris.virginica<-subset(iris,iris$Species="virginica")
iris.virginica<-subset(iris,iris$Species=="virginica")
iris.virginica
names(iris)
iris.virginica<-subset(iris,Species=="virginica")
iris.virginica
iris
library(datasets)
data(iris)
iris
iris.virginica<-subset(iris,Species=="virginica")
iris.virginica
mean(iris.virginica$Sepal.Length)
iris
mean(iris$Sepal.Length)
mean(iris$Sepal.Width)
mean(iris$Petal.Length)
mean(iris$Petal.Width)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
sapply(split(mtcars$mpg,mtcars$cyl),mean)
lapply(mtcars,mean)
apply(mtcars,2,mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
split(mtcars$mpg,mtcars$cyl)
split(mtcars$cyl,mtcars$mpg)
mtcars
sapply(split(mtcars$hp,mtcars$cyl),mean)
x<-209.21429-82.63636
x
debug(ls)
ls
ls
ls
library(datasets)
data(iris)
iris
iris.virginica<-subset(iris,iris$Species="virginica")
iris.virginica<-subset(iris,iris$Species=="virginica")
iris.virginica
mean(iris.virginica[,"Sepal.Length"])
iris
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data(mtcars)
mtcars
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
209.21429-82.63636
debug(ls)
ls
debug(ls)
ls(mean)
setwd("~/Desktop")
setwd("~/Desktop/Coursera/R_Programming/ProgrammingAssignment2")
source('~/.active-rstudio-document')
makeVector
makeVector(2)
cachemean
cachemean(3)
source('~/.active-rstudio-document')
makeCacheMatrix
x<-matrix(1:4,2,2)
x
makeCacheMatrix(x)
source('~/.active-rstudio-document')
cacheSolve(x)
cacheSolve()
cacheSolve
x
cacheSolve(x)
source('~/.active-rstudio-document')
cacheSolve(x)
get
getmatrix
getm
get
makeCacheMatrix(x)
x
solve(x)
makeCacheMatrix()
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve
cacheSolve()
debug(cacheSolve)
cacheSolve(x)
source('~/.active-rstudio-document')
debug(cacheSolve)
cacheSolve(x)
debug(makeCacheMatrix)
makeCacheMatrix(x)
source('~/.active-rstudio-document')
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000,ncol=1000)
test(mat1)
x
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix())
cacheSolve(makeCacheMatrix
cacheSolve(makeCacheMatrix)
source('~/.active-rstudio-document')
cacheSolve(makeCacheMatrix)
source('~/.active-rstudio-document')
cacheSolve(makeCacheMatrix)
x
x
solve(x)
source('~/.active-rstudio-document')
makeCacheMatrix(x)
x
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
x
source('~/.active-rstudio-document')
cacheSolve(makeCacheMatrix(x))
source('~/.active-rstudio-document')
cacheSolve(makeCacheMatrix(x))
x
j<-makeCacheMatrix(x)
cacheSolve(j)
source('~/.active-rstudio-document')
cacheSolve(j)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000,ncol=1000)
test(mat1)
k<-matrix(10:13,2,2)
k
solve(k)
makecacheMatrix(k)
makeCacheMatrix(k)
m
cacheSolve()
cacheSolve
cacheSolve(makeCacheMatrix(k))
cacheSolve(makeCacheMatrix(k))
u<-matrix(20:23,2,2)
v<-makeCacheMatrix(u)
cacheSolve(v)
cacheSolve(v)
debug(cacheSolve)
cacheSolve(v)
source('~/Desktop/Coursera/R_Programming/ProgrammingAssignment2/cachematrix.R')
x<-matrix(100:103,2,2)
x
makeCacheMatrix(x)
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
j<-makeCacheMatrix(x)
cacheSolve(j
cacheSolve(j
cacheSolve(j)
cacheSolve(j)
